Implement the missing code, denoted by ellipses. You may not modify the pre-existing code.
Hostnames consist of an alphabetic host type (e.g. "apibox") concatenated with a host number 
(eg: "apibox1", "apibox2", etc. are valid hostnames).

Your task is to create a class called Tracker that supports two operations:

allocate(hostType), which reserves the first available hostname and returns it;

deallocate(hostname), which should release that hostname back into the pool.

The input for this task is an array of sequential queries in string form, 
where a query of type "A <hostType>" means a call to tracker.allocate(<hostType>), 

and query of type "D <hostname>" means a call tracker.deallocate(<hostname>). 
The output should be an array of return values of all allocate calls.

There is already a prewritten piece of code that handles the input / output and makes allocate / deallocate calls, 
so you just need to create the Tracker class that implements them.

Note that deallocating a non-allocated hostname is a valid operation.

Example

For queries = ["A apibox", "A apibox", "D apibox1", "A apibox", "A sitebox"], the output should be
solution(queries) = ["apibox1", "apibox2", "apibox1", "sitebox1"].

This is how it should work for an already initialized Tracker class instance tracker:

>> tracker.allocate('apibox');
"apibox1"

>> tracker.allocate('apibox');
"apibox2"

>> tracker.deallocate('apibox1');

>> tracker.allocate('apibox');
"apibox1"

>> tracker.allocate('sitebox');
"sitebox1"
Input/Output

[execution time limit] 4 seconds (js)

[input] array.string queries

An array of strings representing queries to the tracker.

queries[i] = "A <hostType>" means that you should call tracker.allocate(<hostType>) and return the reserved hostname.
queries[i] = "D <hostname>" means that you should call tracker.deallocate(<hostname>) and return nothing.
It is guaranteed that all host numbers of the deallocating queries won't exceed 999.

Guaranteed constraints:
1 ≤ queries.length ≤ 103.

[output] array.string

An array of responses from the tracker.









function solution(queries) {
  var tracker = new Tracker();
  var results = [];
  queries.forEach(function (query) {
    var [action, name] = query.split(' ');
    if (action === 'A') {
      results.push(tracker.allocate(name));
    } else if (action === 'D') {
      tracker.deallocate(name);
    }
  });
  return results;
}





solution:


class Tracker {
  constructor() {
    this.names = "";
    this.arr = [];
    this.arr2 = [];
    this.counter = 1;
  }
  allocate(hostType) {
    let n = this.arr2.find((ele) => ele.hostType === hostType);
    if (n) {
      n.counter += 1;
    } else {
      this.arr2.push({ hostType: hostType, counter: 1 });
    }

    let name1 = this.arr2.find((ele) => ele.hostType === hostType);
    hostType = hostType.concat(name1.counter);
    console.log("Ok tryind to create " + hostType + " at counter " + name1.counter);
    this.arr.forEach((ele) => {
      if (ele === hostType) {
        console.log("OK " + hostType, "is avalable counter", name1.counter);
        this.counter = parseInt(hostType[hostType.length - 1]) + 1;
        hostType = hostType.substring(0, hostType.length - 1);
        hostType = hostType.concat(this.counter);
      }
    });
   

    this.arr.push(hostType);
    console.log("created", hostType);
    return (this.names = hostType); //.concat(name1.counter)
  }

  deallocate(hostType) {
    let m = hostType;
    if (this.arr.indexOf(hostType) !== -1) {
      this.arr.splice(this.arr.indexOf(hostType), 1);

      hostType = hostType.substring(0, hostType.length - 1);
      let name1 = this.arr2.find((ele) => ele.hostType === hostType);
      let num = name1.counter;
      name1.counter = 0;
      this.counter = 1;
      console.log(
        "deleted",
        m + "at counter " + num + " and counter becomes",
        name1.counter
      );
      console.log(this.arr2);
    }

    return this.arr;
  }
}


function solution(queries) {
  var tracker = new Tracker();
  var results = [];
  queries.forEach(function (query) {
    var [action, name] = query.split(' ');
    if (action === 'A') {
      results.push(tracker.allocate(name));
    } else if (action === 'D') {
      tracker.deallocate(name);
    }
  });
  return results;
}

console.log(solution(["A apibox", "A apibox", "D apibox1", "A apibox", "A sitebox"]));




